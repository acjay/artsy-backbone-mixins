// Generated by CoffeeScript 1.6.3
(function() {
  var expressAsMetric, fractionToDecimal, superscriptFractions, _;

  _ = require('underscore');

  module.exports = {
    dimensions: function(options) {
      var dimensions, _ref;
      if (options == null) {
        options = {};
      }
      if (options.metric == null) {
        options.metric = this.get('metric');
      }
      dimensions = (_ref = this.get('dimensions')) != null ? _ref[options.metric] : void 0;
      dimensions = (function() {
        switch (options.format) {
          case 'superscript':
            return superscriptFractions(dimensions);
          case 'decimal':
            return expressAsMetric(dimensions);
          default:
            return dimensions;
        }
      })();
      return dimensions;
    }
  };

  superscriptFractions = function(string) {
    return string != null ? string.replace(/(\d+)(?:\s+)(\d+\/\d+)/g, '$1 <sup>$2</sup>') : void 0;
  };

  fractionToDecimal = function(string) {
    var decimal, split;
    split = string.split('/');
    decimal = parseInt(split[0], 10) / parseInt(split[1], 10);
    if (decimal === Infinity) {
      throw new Error('Division by zero');
    }
    return decimal.toFixed(2);
  };

  expressAsMetric = function(string) {
    var _this = this;
    return string != null ? string.replace(/((\d+)(?:\s+)(\d+\/\d+)|(\d+\/\d+))/g, function(match) {
      try {
        match = match.replace(/(\d+\/\d+)/g, fractionToDecimal);
        return _.map(match.split(' × '), function(x) {
          var nums;
          nums = _.map(x.split(' '), function(y) {
            return parseFloat(y);
          });
          return _.reduce(nums, (function(memo, num) {
            return memo + num;
          }), 0);
        }).join(' × ');
      } catch (_error) {
        return match;
      }
    }) : void 0;
  };

}).call(this);
